import requests
from parsel import Selector

"""
ExercÃ­cio 1
FaÃ§a uma requisiÃ§Ã£o ao site https://httpbin.org/encoding/utf8 
e exiba seu conteÃºdo de forma legÃ­vel.
"""

""" response = requests.get("https://httpbin.org/encoding/utf8")
selector = Selector(text=response.text)
print(response.text)
"""

"""
ExercÃ­cio 2
FaÃ§a uma requisiÃ§Ã£o ao recurso usuÃ¡rios da API do Github ( https://api.github.com/users ), 
exibindo o username e url de todos os usuÃ¡rios retornados. 
"""

""" response2 = requests.get("https://api.github.com/users")
users = response2.json()

for user in users:
    print(user['login'] + ' ' + user['url']) """

""" ExercÃ­cio 3 Ã€s vezes, vocÃª precisa fazer com que o seu raspador da Web pareÃ§a estar fazendo solicitaÃ§Ãµes HTTP como o navegador, para que o servidor retorne os mesmos dados que vocÃª vÃª no seu navegador. FaÃ§a uma requisiÃ§Ã£o a https://scrapethissite.com/pages/advanced/?gotcha=headers e verifique se foi bem sucedido.
Para verificar se foi bem sucedido, faÃ§a assert "bot detected" not in response.text , se nada acontecer, seu cÃ³digo estÃ¡ funcionando.
ðŸ¦œ FaÃ§a a inspeÃ§Ã£o de como a requisiÃ§Ã£o Ã© feita pelo navegador para conseguir replicar atravÃ©s do cÃ³digo. """


""" response3 = requests.get(
    "https://scrapethissite.com/pages/advanced/?gotcha=headers",
    headers={"User-agent": "Mozilla", "Accept": "text/html"},
)
assert "bot detected" not in response3.text
 """

""" ExercÃ­cio 4 Baseados em uma pÃ¡gina contendo detalhes sobre um livro http://books.toscrape.com/catalogue/the-grand-design_405/index.html , faÃ§a a extraÃ§Ã£o dos campos tÃ­tulo, preÃ§o, descriÃ§Ã£o e url contendo a imagem de capa do livro.
O preÃ§o deve vir somente valores numÃ©ricos e ponto. Ex: Ã‚Â£13.76 -> 13.76 .
A descriÃ§Ã£o de ter o sufixo "more..." removido quando existir.
Os campos extraÃ­dos devem ser apresentados separados por vÃ­rgula. Ex: tÃ­tulo,preÃ§o, descriÃ§Ã£o,capa. """

URL_BASE = "http://books.toscrape.com/catalogue/"
response4 = requests.get(
    "http://books.toscrape.com/catalogue/the-grand-design_405/index.html"
)
selector = Selector(text=response4.text)

title = selector.css("h1::text").get()
price = selector.css(".product_main > .price_color::text").re_first(
    r"\d*\.\d{2}"
)
description = selector.css(".product_page > p::text").get()

suffix = "...more"

if description.endswith(suffix):
    description = description[: -len(suffix)]

cover = URL_BASE + selector.css("#product_gallery img::attr(src)").get()

""" ExercÃ­cio 5 Modifique o exercÃ­cio anterior para retornar tambÃ©m quantos livros estÃ£o disponÃ­veis apresentando como Ãºltimo campo no retorno. """

avaliable = selector.css(".table-striped > tr > td::text")[5].re_first("\d")
""" ou """
availability = selector.css(".product_main .availability::text").re_first("\d")

print(title, price, cover, description, avaliable, sep=",")

